//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace SharpArch.Specifications.SharpArch.Core.NHibernateValidator.ValidatorProvider
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Web.Mvc;

    using global::SharpArch.Core.NHibernateValidator.ValidatorProvider;

    using Machine.Specifications;

    using NHibernate.Validator.Constraints;

    public abstract class specification_for_nhibernate_validator_provider
    {
        protected static ControllerContext controllerContext;

        protected static NHibernateValidatorProvider validatorProvider;

        protected static ViewDataDictionary<TestModel> viewData;

        Establish context_for_each = () =>
            {
                viewData = new ViewDataDictionary<TestModel>();
                controllerContext = new ControllerContext();
            };

        protected static void CreateSut()
        {
            validatorProvider = new NHibernateValidatorProvider();
        }

        protected static ModelClientValidationRule ClientValidation_AssertRule<TValue>(Expression<Func<TestModel, TValue>> property, string validationType, string errorMessage)
        {
            var modelMetadata = ModelMetadata.FromLambdaExpression(property, viewData);

            var modelValidators = validatorProvider.GetValidators(modelMetadata, controllerContext);

            modelValidators.ShouldNotBeEmpty();
            
            var validationRules = modelValidators.SelectMany(x => x.GetClientValidationRules()).ToList();

            validationRules.Count.ShouldEqual(1);

            var validationRule = validationRules[0];

            validationRule.ValidationType.ShouldEqual(validationType);
            validationRule.ErrorMessage.ShouldEqual(errorMessage);

            return validationRule;
        }

        protected static void ClientValidation_AssertNoRule<TValue>(Expression<Func<TestModel, TValue>> property)
        {
            var modelMetadata = ModelMetadata.FromLambdaExpression(property, viewData);

            var modelValidators = validatorProvider.GetValidators(modelMetadata, controllerContext);

            modelValidators.ShouldBeEmpty();
        }

        public class TestModel
        {
            [LengthAttribute(Message = "length_message", Min = 3, Max = 10)]
            public string LengthProperty { get; set; }

            [Max(Message = "max_message", Value = 10)]
            public string MaxProperty { get; set; }
            [Min(Message = "min_message", Value = 3)]
            public string MinProperty { get; set; }
            [NotEmpty(Message = "not_empty_message")]
            public string NotEmptyStringProperty { get; set; }
            [NotNull(Message = "not_null_message")]
            public string NotNullProperty { get; set; }

            [Pattern(Message = "pattern_message", Regex = "[a-zA-Z]{3,10}")]
            public string PatternProperty { get; set; }
            [NHibernate.Validator.Constraints.Range(Message = "range_message", Min = 3, Max = 10)]
            public int RangeProperty { get; set; }

            [NotNullNotEmpty(Message = "not_null_not_empty_message")]
            public string NotNullNotEmptyProperty { get; set; }

            [Email]
            public string EmailProperty { get; set; }
        }
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_length_attribute_is_validated : specification_for_nhibernate_validator_provider
    {
        static ModelClientValidationRule validationRule;

        Establish context = CreateSut;

        Because of = () => validationRule = ClientValidation_AssertRule(x => x.LengthProperty, "stringLength", "length_message");

        It should_have_a_minimum_length_of_3 = () => validationRule.ValidationParameters["minimumLength"].ShouldEqual(3);

        It should_have_a_maximum_length_of_10 = () => validationRule.ValidationParameters["maximumLength"].ShouldEqual(10);
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_max_property_is_validated : specification_for_nhibernate_validator_provider
    {
        static ModelClientValidationRule validationRule;

        static int maximum;

        Establish context = CreateSut;

        Because of = () =>
            {
                validationRule = ClientValidation_AssertRule(x => x.MaxProperty, "range", "max_message");
                maximum = Convert.ToInt32(validationRule.ValidationParameters["maximum"]);
            };

        It should_have_a_maximum_length_of_10 = () => maximum.ShouldEqual(10);
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_min_property_is_validated : specification_for_nhibernate_validator_provider
    {
        static ModelClientValidationRule validationRule;

        static int minimum;

        Establish context = CreateSut;

        Because of = () =>
            {
                validationRule = ClientValidation_AssertRule(x => x.MinProperty, "range", "min_message");
                minimum = Convert.ToInt32(validationRule.ValidationParameters["minimum"]);
            };

        It should_have_a_maximum_length_of_10 = () => minimum.ShouldEqual(3);
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_not_empty_string_property_is_validated : specification_for_nhibernate_validator_provider
    {
        Establish context = CreateSut;

        It should_assert_client_validation =
            () => ClientValidation_AssertRule(x => x.NotEmptyStringProperty, "required", "not_empty_message");
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_not_null_property_is_validated : specification_for_nhibernate_validator_provider
    {
        Establish context = CreateSut;

        It should_assert_client_validation =
            () => ClientValidation_AssertRule(x => x.NotNullProperty, "required", "not_null_message");
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_pattern_attribute_is_validated : specification_for_nhibernate_validator_provider
    {
        static ModelClientValidationRule validationRule;

        Establish context = CreateSut;

        Because of = () => validationRule = ClientValidation_AssertRule(x => x.PatternProperty, "regularExpression", "pattern_message");

        It should_have_a_minimum_length_of_3 = () => validationRule.ValidationParameters["pattern"].ShouldEqual("[a-zA-Z]{3,10}");
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_range_attribute_is_validated : specification_for_nhibernate_validator_provider
    {
        static ModelClientValidationRule validationRule;

        static int minimum;

        static int maximum;

        Establish context = CreateSut;

        Because of = () =>
            {
                validationRule = ClientValidation_AssertRule(x => x.LengthProperty, "stringLength", "length_message");
                minimum = Convert.ToInt32(validationRule.ValidationParameters["minimumLength"]);
                maximum = Convert.ToInt32(validationRule.ValidationParameters["maximumLength"]);
            };

        It should_have_a_minimum_length_of_3 = () => minimum.ShouldEqual(3);

        It should_have_a_maximum_length_of_10 = () => maximum.ShouldEqual(10);
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_not_null_not_empty_property_is_validated : specification_for_nhibernate_validator_provider
    {
        Establish context = CreateSut;

        It should_assert_client_validation = () => ClientValidation_AssertRule(x => x.NotNullNotEmptyProperty, "required", "not_null_not_empty_message");
    }

    [Subject(typeof(NHibernateValidatorProvider))]
    public class when_a_property_with_a_email_property_is_validated : specification_for_nhibernate_validator_provider
    {
        Establish context = CreateSut;

        It should_assert_client_validation = () => ClientValidation_AssertNoRule(x => x.EmailProperty);
    }
}