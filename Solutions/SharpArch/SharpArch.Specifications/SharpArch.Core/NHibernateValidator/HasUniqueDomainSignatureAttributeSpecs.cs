//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace SharpArch.Specifications.SharpArch.Core.NHibernateValidator
{
    using System;
    using System.Reflection;

    using global::SharpArch.Core.DomainModel;
    using global::SharpArch.Core.NHibernateValidator;

    using Machine.Specifications;

    using System.Linq;

    public abstract class specification_for_has_unique_domain_signature_attribute
    {
        protected const string customMessage = "Custom Message";

        protected const string defaultMessage = "Provided values matched an existing, duplicate entity";

        [HasUniqueDomainSignature]
        public class ObjectWithIntIdDefaultMessage : Entity
        {
            #region Properties

            [DomainSignature]
            public string Name { get; set; }

            #endregion
        }

        [HasUniqueDomainSignature(Message = customMessage)]
        public class ObjectWithIntIdCustomMessage : Entity
        {
            #region Properties

            [DomainSignature]
            public string Name { get; set; }

            #endregion
        }

        [HasUniqueDomainSignatureWithGuidId]
        public class ObjectWithGuidIdDefaultMessage : EntityWithTypedId<Guid>
        {
            #region Properties

            [DomainSignature]
            public string Name { get; set; }

            #endregion
        }

        [HasUniqueDomainSignatureWithGuidId(Message = customMessage)]
        public class ObjectWithGuidIdCustomMessage : EntityWithTypedId<Guid>
        {
            #region Properties

            [DomainSignature]
            public string Name { get; set; }

            #endregion
        }

        [HasUniqueDomainSignatureWithStringId]
        public class ObjectWithStringIdDefaultMessage : EntityWithTypedId<string>
        {
            #region Properties

            [DomainSignature]
            public string SSN { get; set; }

            #endregion
        }

        [HasUniqueDomainSignatureWithStringId(Message = customMessage)]
        public class ObjectWithStringIdCustomMessage : EntityWithTypedId<string>
        {
            #region Properties

            [DomainSignature]
            public string SSN { get; set; }

            #endregion
        }
    }

    [Subject(typeof(HasUniqueDomainSignatureAttribute))]
    public class when_no_custom_message_is_defined_for_an_object_with_int_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureAttribute theAttribute;

        Establish context = () =>
            { 
                inf = typeof(ObjectWithIntIdDefaultMessage);
                attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureAttribute), false);
                theAttribute = (HasUniqueDomainSignatureAttribute)attributes.First();
            };

        It should_use_the_default_message = () => theAttribute.Message.ShouldEqual(defaultMessage);
    }

    [Subject(typeof(HasUniqueDomainSignatureAttribute))]
    public class when_a_custom_message_is_defined_for_an_object_with_int_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureAttribute theAttribute;

        Establish context = () =>
        {
            inf = typeof(ObjectWithIntIdCustomMessage);
            attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureAttribute), false);
            theAttribute = (HasUniqueDomainSignatureAttribute)attributes.First();
        };

        It should_use_the_custom_message = () => theAttribute.Message.ShouldEqual(customMessage);
    }

    [Subject(typeof(HasUniqueDomainSignatureWithGuidIdAttribute))]
    public class when_no_custom_message_is_defined_for_an_object_with_guid_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureWithGuidIdAttribute theAttribute;

        Establish context = () =>
        {
            inf = typeof(ObjectWithGuidIdDefaultMessage);
            attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureWithGuidIdAttribute), false);
            theAttribute = (HasUniqueDomainSignatureWithGuidIdAttribute)attributes.First();
        };

        It should_use_the_default_message = () => theAttribute.Message.ShouldEqual(defaultMessage);
    }

    [Subject(typeof(HasUniqueDomainSignatureWithGuidIdAttribute))]
    public class when_a_custom_message_is_defined_for_an_object_with_guid_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureWithGuidIdAttribute theAttribute;

        Establish context = () =>
        {
            inf = typeof(ObjectWithGuidIdCustomMessage);
            attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureWithGuidIdAttribute), false);
            theAttribute = (HasUniqueDomainSignatureWithGuidIdAttribute)attributes.First();
        };

        It should_use_the_custom_message = () => theAttribute.Message.ShouldEqual(customMessage);
    }

    [Subject(typeof(HasUniqueDomainSignatureWithStringIdAttribute))]
    public class when_no_custom_message_is_defined_for_an_object_string_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureWithStringIdAttribute theAttribute;

        Establish context = () =>
        {
            inf = typeof(ObjectWithStringIdDefaultMessage);
            attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureWithStringIdAttribute), false);
            theAttribute = (HasUniqueDomainSignatureWithStringIdAttribute)attributes.First();
        };

        It should_use_the_default_message = () => theAttribute.Message.ShouldEqual(defaultMessage);
    }

    [Subject(typeof(HasUniqueDomainSignatureWithStringIdAttribute))]
    public class when_a_custom_message_is_defined_for_an_object_with_string_id : specification_for_has_unique_domain_signature_attribute
    {
        static MemberInfo inf;

        static Object[] attributes;

        static HasUniqueDomainSignatureWithStringIdAttribute theAttribute;

        Establish context = () =>
        {
            inf = typeof(ObjectWithStringIdCustomMessage);
            attributes = inf.GetCustomAttributes(typeof(HasUniqueDomainSignatureWithStringIdAttribute), false);
            theAttribute = (HasUniqueDomainSignatureWithStringIdAttribute)attributes.First();
        };

        It should_use_the_custom_message = () => theAttribute.Message.ShouldEqual(customMessage);
    }

}